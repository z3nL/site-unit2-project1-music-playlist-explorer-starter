/* Data Loading Operations */
// All data, barring the first playlist and its content, was generated by Metamate
async function loadData() {
    try {
        // Gather playlist array
        const response = await fetch('./data/data.json');
        if (!response.ok) {
            throw new Error('Data retrieval: bad response');
        }
        const playlists = await response.json();

        // Establish cards
        let cardBase = document.getElementsByClassName("playlist-cards")[0];
        // Build playlist cards and their respective modals
        playlists.forEach(pl => {
            // Build card | Indentations represent divisional nestings
            let card = document.createElement("article");
                card.id = `card${pl.playlistID}`;

                // Card image
                let cardPlCover = document.createElement("img");
                    cardPlCover.className = 'cover';
                    cardPlCover.onclick = () => {
                        toggleModalv2(card.id);
                    };
                    cardPlCover.src = pl.playlist_art;
                    cardPlCover.alt =  'playlist cover';
                    card.appendChild(cardPlCover);

                // Playlist name
                let cardPlName = document.createElement("h2");
                    cardPlName.textContent = pl.playlist_name;
                    card.appendChild(cardPlName);

                // Playlist author
                let cardPlAuthor = document.createElement("p");
                    cardPlAuthor.textContent = `by ${pl.playlist_author}`;
                    card.appendChild(cardPlAuthor);
                
                // Like count division
                let lcDiv = document.createElement("div");
                    lcDiv.className = 'likecount';
                    let heart = document.createElement("img");
                        heart.id = `heart${pl.playlistID}`;
                        heart.className = "empty";
                        heart.onclick = () => {
                            likePL(heart.id);
                        }
                        heart.src = './assets/img/hearticon.png';
                        heart.alt = 'a heart icon';
                        lcDiv.appendChild(heart);
                    let likecount = document.createElement("p");
                        likecount.id = `lc${pl.playlistID}`;
                        likecount.textContent = pl.like_count;
                        lcDiv.appendChild(likecount);
                    card.appendChild(lcDiv);
                
            cardBase.appendChild(card);
        });
    } catch (error) {
        console.error('Data retrieval: ', error);
    }
}
loadData();

/* Modal Open/Close Operations */
// Second iteration of modal toggle after redundant predecessor
async function toggleModalv2(id) {
    try {
        let modal = document.getElementsByClassName("modal")[0];

        // Check if already open
        if (modal.style.display === "flex") {
            modal.style.display = "none";
            let plContent = document.getElementById("modalPlContent");
                plContent.remove();
            let delBtn = document.getElementsByClassName("delete")[0];
                delBtn.setAttribute("id", "delete");
            let editBtn = document.getElementsByClassName("edit")[0];
                editBtn.setAttribute("id", "edit");
                editBtn.innerText = "Edit";
            return;
        }

        // Gather playlist array
        const response = await fetch('./data/data.json');
        if (!response.ok) {
            throw new Error('Data retrieval: bad response');
        }
        const playlists = await response.json();

        // Select playlist and populate info
        let pl = playlists[id.split("card")[1]];

        // Gague presence of playlist edits and populate modal based on them
        const card = document.getElementById(`card${pl.playlistID}`);
        const cardTitle = card.getElementsByTagName("h2")[0].innerText;
        const cardAuth = card.getElementsByTagName("p")[0].innerText.split("by ")[1];
        const change = Boolean(!(cardTitle === pl.playlist_name && cardAuth === pl.playlist_author));

        let cover = document.getElementById("modalCover");
            cover.setAttribute("src", pl.playlist_art);
        
        let title = document.getElementById("modalTitle");
            title.innerText = change ? cardTitle : pl.playlist_name;
        
        let author = document.getElementById("modalAuthor");
            author.innerText = `by ${change ? cardAuth : pl.playlist_author}`
        
        let delBtn = document.getElementById("delete");
            delBtn.setAttribute("id", `delete${pl.playlistID}`);
        
        let editBtn = document.getElementById("edit");
            editBtn.setAttribute("id", `edit${pl.playlistID}`);
        
        const changeTitle = Boolean
        let modalContent = document.getElementById("modalContent");
            let plContent = document.createElement("div");
                plContent.id = "modalPlContent";
                plContent.className = "playlistContent";
                let i=0;
                pl.songs.forEach(song => {
                    let songItem = document.createElement("article");
                        songItem.id = `song${i++}`;

                        // Left side of song item: cover, gen. info
                        let sLeft = document.createElement("div");
                            sLeft.className = "left";

                            // Cover
                            let sCover = document.createElement("img");
                                sCover.src = song.cover;
                                sCover.alt = "song cover";
                                sLeft.appendChild(sCover);

                            // Gen. info
                            let sInfo = document.createElement("div");
                                sInfo.className = "songInfo";
                                let sTitle = document.createElement("h3");
                                    sTitle.innerText = song.title
                                    sInfo.appendChild(sTitle);
                                let artist = document.createElement("p");
                                    artist.innerText = song.artist;
                                    sInfo.appendChild(artist);
                                let album = document.createElement("p");
                                    album.innerText = song.album;
                                    sInfo.append(album);
                                sLeft.appendChild(sInfo);

                            songItem.appendChild(sLeft);

                        // Right side of song item: runtime
                        let sRight = document.createElement("div");
                            sRight.className = "right";
                            let runtime = document.createElement("p");
                                runtime.innerText = song.runtime;
                                sRight.appendChild(runtime);
                            songItem.appendChild(sRight);

                    plContent.appendChild(songItem);
                });
            modalContent.appendChild(plContent);
        
        modal.style.display = "flex";

    } catch (error) {
        console.log('toggle Modal: ', error);
    }
}

// TODO How could I have structured this better?
// Various operations
window.onclick = function(event) {
    // TODO How could I have set up playlist editing better?
    // For playlist edits
        let title = document.getElementById("modalTitle");
            const titleOG = title.innerText;
        let author = document.getElementById("modalAuthor");
            const authorOG = author.innerText;

    // Resets statuses and exits modal overlay when surrounding area is clicked
    if (event.target.className === "modal") {
        event.target.style.display = "none";
        let plContent = document.getElementById("modalPlContent");
            plContent.remove();
        let delBtn = document.getElementsByClassName("delete")[0];
            delBtn.setAttribute("id", "delete");
        let editBtn = document.getElementsByClassName("edit")[0];
            editBtn.setAttribute("id", "edit");

        // Abort edits if any are pending
        if (document.getElementsByClassName("edit")[0].innerText === "✓") {
            editBtn.innerText = "Edit";
            title.outerHTML = `<h3 id="modalTitle">${titleOG}</h3>`;
            author.outerHTML = `<p id="modalAuthor">by ${authorOG}</h3>`;
            document.getElementById("eT").remove();
            document.getElementById("eA").remove();
        }
    }

    // Operates card deletions
    if (event.target.className === "delete") {
        const id = event.target.id.split("delete")[1];
        const delCard = document.getElementById(`card${id}`);
        delCard.remove();
        toggleModalv2(-1);
    }

    // Operates edits
    if (event.target.className === "edit") {

        // Begin edits
        if (event.target.innerText === "Edit") {
            event.target.innerText = "✓";

            title.outerHTML =
            `<h2 id="eT">Edit Title</h2><input id="modalTitle" value="${title.innerText}" placeholder="Title"></input>`;

            author.outerHTML =
            `<h2 id="eA">Edit Author</h2><input id="modalAuthor" value="${author.innerText.split("by ")[1]}" placeholder="Author"></input>`;
        }

        // Confirm changes
        else if (event.target.innerText = "✓") {
            event.target.innerText = "Edit";
            title.outerHTML = `<h3 id="modalTitle">${title.value}</h3>`;
            author.outerHTML = `<p id="modalAuthor">by ${author.value}</p>`;
            document.getElementById("eT").remove();
            document.getElementById("eA").remove();

            const id = event.target.id.split("edit")[1];
            let card = document.getElementById(`card${id}`);
            let cardTitle = card.getElementsByTagName("h2")[0];
                cardTitle.innerText = title.value;
            let cardAuthor = card.getElementsByTagName("p")[0];
                cardAuthor.innerText = `by ${author.value}`;
        }
    }
}

/* Liking Operations */
function likePL(id) {
    const curHeart = document.getElementById(id);

    const idNum = id.split("heart")[1];
    const count = document.getElementById(`lc${idNum}`);

    if (curHeart.className === "empty") {
        curHeart.setAttribute("src", './assets/img/fullheart.png');
        curHeart.setAttribute("class", "full");
        count.innerText = parseInt(count.innerText) + 1;
    }
    else {
        curHeart.setAttribute("src", './assets/img/hearticon.png');
        curHeart.setAttribute("class", "empty");
        count.innerText = parseInt(count.innerText) - 1;
    }
}

/* Shuffle Operations */
function shuffle() {
    const modalContent = document.getElementById("modalContent");
    const songsBox = document.getElementById("modalPlContent");
    
    // Gather songs' article elements
    let songs = songsBox.childNodes;

    // Reconstruct the song list
    const newBox = document.createElement("div");
        newBox.id = "modalPlContent";
        newBox.className = "playlistContent";


    // Load set of song IDs to randomly pick from
    let IDs = [];
    let id = 0; 
    while (id < songs.length) {
        IDs.push(id++);
    }

    // Randomly pick songs out of old container to place in new
    while (IDs.length > 0) {
        const id = Math.floor(Math.random() * IDs.length);
        const pick = IDs[id];
        IDs.splice(id, 1);

        // Select the song and place it in the new container
        const song = document.getElementById(`song${pick}`);
        newBox.append(song);

    }

    // Remove orig. container and append newBox to modalContent
    songsBox.remove();
    modalContent.appendChild(newBox);
}

/* Filter Operations */
function filter() {
    const searchContent = document.getElementById("search").value;
    const sortChoice = document.getElementById("sort").value;

}