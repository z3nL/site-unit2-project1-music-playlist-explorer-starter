/* Data Loading Operations */
// All data, barring the first playlist and its content, was generated by Metamate
// Takes argument of existing playlist data or null to fetch initial data
async function loadData(plData) {
    try {
        // Gather playlist array
        let playlists = plData;
        if (playlists === null) {
            const response = await fetch('./data/data.json');
            if (!response.ok) {
                throw new Error('Data retrieval: bad response');
            }
            playlists = await response.json();
        }   

        // Establish cards
        let cardBase = document.getElementsByClassName("playlist-cards")[0];

        // Build playlist cards and their respective modals
        playlists.forEach(pl => {
            let card = genCard(pl);
            cardBase.appendChild(card);
        });
    } catch (error) {
        console.error('Data retrieval: ', error);
    }
}
/* Playlist card generation operations */
// Takes argument of JSON object containing an individual playlist's data
// Returns an HTML object representing a playlist card
function genCard(pl) {
    // Build card | Indentations represent divisional nestings
    let card = document.createElement("article");
        card.id = `card${pl.playlistID}`;

        // Card image
        let cardPlCover = document.createElement("img");
            cardPlCover.className = 'cover';
            cardPlCover.onclick = () => {
                toggleModalv2(card.id);
            };
            cardPlCover.src = pl.playlist_art;
            cardPlCover.alt =  'playlist cover';
            card.appendChild(cardPlCover);

        // Playlist name
        let cardPlName = document.createElement("h2");
            cardPlName.textContent = pl.playlist_name;
            card.appendChild(cardPlName);

        // Playlist author
        let cardPlAuthor = document.createElement("p");
            cardPlAuthor.textContent = `by ${pl.playlist_author}`;
            card.appendChild(cardPlAuthor);
        
        // Like count division
        let lcDiv = document.createElement("div");
            lcDiv.className = 'likeCount';
            let heart = document.createElement("img");
                heart.id = `heart${pl.playlistID}`;
                heart.className = "empty";
                heart.onclick = () => {
                    likePL(heart.id);
                }
                heart.src = './assets/img/hearticon.png';
                heart.alt = 'a heart icon';
                lcDiv.appendChild(heart);
            let likeCount = document.createElement("p");
                likeCount.id = `lc${pl.playlistID}`;
                likeCount.textContent = pl.like_count;
                lcDiv.appendChild(likeCount);
            card.appendChild(lcDiv);

    return card;
}

/* Modal Open/Close Operations */
// Takes argument of playlist id and displays corresponding info
// Extraneous arguments: 
//  -1 -> static closure operation
//  -2 -> attributed to add new playlist operations
async function toggleModalv2(id) {
    try {
        let modal = document.getElementsByClassName("modal")[0];

        // Check if already open: close it and reset interactive fields
        if (modal.style.display === "flex") {
            modal.style.display = "none";
            let plContent = document.getElementById("modalPlContent");
                plContent.remove();
            let delBtn = document.getElementsByClassName("delete")[0];
                delBtn.setAttribute("id", "delete");
            let editBtn = document.getElementsByClassName("edit")[0];
                editBtn.setAttribute("id", "edit");
                editBtn.innerText = "Edit";
            return;
        }

        // Check if modal is opened in an add context (-2)
        if (id === -2) {
            modal.style.display = "flex";
            return;
        }

        // Gather playlist array
        const response = await fetch('./data/data.json');
        if (!response.ok) {
            throw new Error('Data retrieval: bad response');
        }
        const playlists = await response.json();

        // Select playlist and populate info
        let pl = playlists[id.split("card")[1]];

        // Populate modal info, accounting for changes made to an existing card
        loadPlInfo(pl);

        let modalContent = document.getElementById("modalContent");
            let plContent = document.createElement("div");
                plContent.id = "modalPlContent";
                plContent.className = "playlistContent";
                let i=0;
                pl.songs.forEach(song => {
                    let songItem = genSong(song, i++);
                    plContent.appendChild(songItem);
                });
            modalContent.appendChild(plContent);
        
        modal.style.display = "flex";

    } catch (error) {
        console.log('toggle Modal: ', error);
    }
}

/* Modal information injection operations */
// Takes argument of individual JSON object containing a playlist's data
function loadPlInfo(pl) {
    // Gague presence of existing playlist edits and populate modal based on them
    const card = document.getElementById(`card${pl.playlistID}`);
    const cardTitle = card.getElementsByTagName("h2")[0].innerText;
    const cardAuth = card.getElementsByTagName("p")[0].innerText.split("by ")[1];
    let change = Boolean(!(cardTitle === pl.playlist_name && cardAuth === pl.playlist_author));
        change = card ? change : false;

    let cover = document.getElementById("modalCover");
        cover.setAttribute("src", pl.playlist_art);
    
    let title = document.getElementById("modalTitle");
        title.innerText = change ? cardTitle : pl.playlist_name;
    
    let author = document.getElementById("modalAuthor");
        author.innerText = `by ${change ? cardAuth : pl.playlist_author}`
    
    let delBtn = document.getElementById("delete");
        delBtn.setAttribute("id", `delete${pl.playlistID}`);
    
    let editBtn = document.getElementById("edit");
        editBtn.setAttribute("id", `edit${pl.playlistID}`);
}

/* Song card generation operations */
// Takes argument of individual JSON object containing a song's data 
// and the int to be assigned to its HTML id
// Returns an HTML object representing a song card to be appending to a playlist's contents in-modal
function genSong(song, id) {
    let songItem = document.createElement("article");
        songItem.id = `song${id}`;

        // Left side of song item: cover, gen. info
        let sLeft = document.createElement("div");
            sLeft.className = "left";

            // Cover
            let sCover = document.createElement("img");
                sCover.src = song.cover;
                sCover.alt = "song cover";
                sLeft.appendChild(sCover);

            // Gen. info
            let sInfo = document.createElement("div");
                sInfo.className = "songInfo";
                let sTitle = document.createElement("h3");
                    sTitle.innerText = song.title
                    sInfo.appendChild(sTitle);
                let artist = document.createElement("p");
                    artist.innerText = song.artist;
                    sInfo.appendChild(artist);
                let album = document.createElement("p");
                    album.innerText = song.album;
                    sInfo.append(album);
                sLeft.appendChild(sInfo);

            songItem.appendChild(sLeft);

        // Right side of song item: runtime
        let sRight = document.createElement("div");
            sRight.className = "right";
            let runtime = document.createElement("p");
                runtime.innerText = song.runtime;
                sRight.appendChild(runtime);
            songItem.appendChild(sRight);
    
    return songItem;
}

// Delete button click event listener
let delButton = document.getElementsByClassName("delete")[0];
delButton.addEventListener("click", function(event) {
    const id = delButton.id.split("delete")[1];
    const delCard = document.getElementById(`card${id}`);
    delCard.remove();
    toggleModalv2(-1);
});

// Edit button click event listener
let editButton = document.getElementsByClassName("edit")[0];
editButton.addEventListener("click", function(event) {
    let title = document.getElementById("modalTitle");
    let author = document.getElementById("modalAuthor");

    // Begin edits
    if (editButton.innerText === "Edit") {
        editButton.innerText = "✓";

        title.outerHTML =
        `<h2 id="eT">Edit Title</h2><input id="modalTitle" value="${title.innerText}" placeholder="Title"></input>`;

        author.outerHTML =
        `<h2 id="eA">Edit Author</h2><input id="modalAuthor" value="${author.innerText.split("by ")[1]}" placeholder="Author"></input>`;
    }

    // Confirm changes
    else if (editButton.innerText = "✓") {
        editButton.innerText = "Edit";
        title.outerHTML = `<h3 id="modalTitle">${title.value}</h3>`;
        author.outerHTML = `<p id="modalAuthor">by ${author.value}</p>`;
        document.getElementById("eT").remove();
        document.getElementById("eA").remove();

        const id = editButton.id.split("edit")[1];
        let card = document.getElementById(`card${id}`);
        let cardTitle = card.getElementsByTagName("h2")[0];
            cardTitle.innerText = title.value;
        let cardAuthor = card.getElementsByTagName("p")[0];
            cardAuthor.innerText = `by ${author.value}`;
    }
});

// Outer modal click event listener
// Leverages "window" so inner modal does not trigger response
window.onclick = function(event) {
    // For playlist edits
        let title = document.getElementById("modalTitle");
            const titleOG = title.innerText;
        let author = document.getElementById("modalAuthor");
            const authorOG = author.innerText;

    // Resets statuses and exits modal overlay when surrounding area is clicked
    if (event.target.className === "modal") {
        event.target.style.display = "none";
        let plContent = document.getElementById("modalPlContent");
            if (plContent) { plContent.remove(); }
        let delBtn = document.getElementsByClassName("delete")[0];
            delBtn.setAttribute("id", "delete");
        let editBtn = document.getElementsByClassName("edit")[0];
            editBtn.setAttribute("id", "edit");
        let addSongForm = document.getElementById("addSongForm");
            addSongForm.style.display = "none";

        
        // Revert alterations made to modal for adding / editing
        let close = document.getElementsByClassName("close")[0];
        let src = close.src.split("img/")[1];
        if (src === "checkmark.png") {
            close.setAttribute("src", "./assets/img/xicon.svg");
            close.setAttribute("onclick", "toggleModalv2(-1)");
            let s = document.getElementById("shuffle");
            let d = document.getElementById("delete");
            let e = document.getElementById("edit");
            [s, d, e].forEach((item) => item.style.display = "block");

            title.outerHTML = `<h3 id="modalTitle">${titleOG}</h3>`;
            author.outerHTML = `<p id="modalAuthor">by ${authorOG}</h3>`;
            document.getElementById("eT").remove();
            document.getElementById("eA").remove();
        }
        // Abort edits if any are pending
        if (document.getElementsByClassName("edit")[0].innerText === "✓") {
            editBtn.innerText = "Edit";
        }
    }
}

/* Liking Operations */
function likePL(id) {
    const curHeart = document.getElementById(id);

    const idNum = id.split("heart")[1];
    const count = document.getElementById(`lc${idNum}`);

    if (curHeart.className === "empty") {
        curHeart.setAttribute("src", './assets/img/fullheart.png');
        curHeart.setAttribute("class", "full");
        count.innerText = parseInt(count.innerText) + 1;
    }
    else {
        curHeart.setAttribute("src", './assets/img/hearticon.png');
        curHeart.setAttribute("class", "empty");
        count.innerText = parseInt(count.innerText) - 1;
    }
}

/* Shuffle Operations */
function shuffle() {
    const modalContent = document.getElementById("modalContent");
    const songsBox = document.getElementById("modalPlContent");
    
    // Gather songs' article elements
    let songs = songsBox.childNodes;

    // Reconstruct the song list
    const newBox = document.createElement("div");
        newBox.id = "modalPlContent";
        newBox.className = "playlistContent";


    // Load set of song IDs to randomly pick from
    let IDs = [];
    let id = 0; 
    while (id < songs.length) {
        IDs.push(id++);
    }

    // Randomly pick songs out of old container to place in new
    while (IDs.length > 0) {
        const id = Math.floor(Math.random() * IDs.length);
        const pick = IDs[id];
        IDs.splice(id, 1);

        // Select the song and place it in the new container
        const song = document.getElementById(`song${pick}`);
        newBox.append(song);

    }

    // Remove orig. container and append newBox to modalContent
    songsBox.remove();
    modalContent.appendChild(newBox);
}

/* Filter Operations */
async function filter() {
    let searchContent = document.getElementById("search").value;
        searchContent = searchContent.toLowerCase();
    const sortChoice = document.getElementById("sort").value;

    // Fetch data
    const response = await fetch('./data/data.json');
    if (!response.ok) {
        throw new Error('Data retrieval: bad response');
    }
    let playlists = await response.json();

    // Searching
    if (searchContent !== "") {
        console.log(searchContent);
        let i=0;
        while (i < playlists.length) {
            const pl = playlists[i];
            if (!(pl.playlist_name.toLowerCase().includes(searchContent) || pl.playlist_author.toLowerCase().includes(searchContent))) {
                playlists.splice(i--, 1);
            }
            i+=1;
        }
    }

    // Sorting
    if (sortChoice === "aToZ") {
        playlists.sort((a, b) => (a.playlist_name > b.playlist_name ? 1 : -1));
    }
    if (sortChoice === "likeCount") {
        playlists.sort((a, b) => {
            if (a.like_count === b.like_count) {
                return a.playlist_name > b.playlist_name ? 1 : -1;
            }
            return a.like_count < b.like_count ? 1 : -1;
        });
    }
    if (sortChoice === "dateAdded") {
        playlists.sort((a, b) => {
            if (a.date_added === b.date_added) {
                return a.playlist_name > b.playlist_name ? 1 : -1;
            }
            return a.date_added < b.date_added ? 1 : -1;
        });
    }


    // Clear cards
    let cards = document.getElementsByClassName("playlist-cards")[0];
    while (cards.childNodes.length > 5) {
        cards.removeChild(cards.lastChild);
    }
    // Repopulate
    loadData(playlists);
}
// Event listener for hitting enter key in search box
const search = document.getElementById("search");
search.addEventListener("keypress", function(event) {
    if (event.key === "Enter") {
        event.preventDefault();
        document.getElementById("submit").click();
    }
});

/* Reset search filters */
function resetFilter() {
    const search = document.getElementById("search");
        search.value = "";
    const sort = document.getElementById("sort");
        sort.value = "null";

    // Clear cards
    let cards = document.getElementsByClassName("playlist-cards")[0];
    while (cards.childNodes.length > 5) {
        cards.removeChild(cards.lastChild);
    }
    // Repopulate
    loadData(null);
}

/* Display New Playlist Modal */
function addModal() {
    toggleModalv2(-2);

    // Hide buttons
    let shuff = document.getElementById("shuffle");
    let del = document.getElementById("delete");
    let edit = document.getElementById("edit");
    [shuff, del, edit].forEach((item) => item.style.display = "none");

    // Prompt playlist info
    let title = document.getElementById("modalTitle");
    let author = document.getElementById("modalAuthor");
    title.outerHTML =
    `<h2 id="eT">Name This Playlist</h2><input id="modalTitle" placeholder="Title"></input>`;
    author.outerHTML =
    `<h2 id="eA">Who Made This?</h2><input id="modalAuthor" placeholder="Author"></input>`;

    // Replace X with checkmark
    let close = document.getElementsByClassName("close")[0];
        close.setAttribute("src", "./assets/img/checkmark.png");
        close.setAttribute("onclick", "completeAdd()");
    
    // Acknowledge existing modal
    let modal = document.getElementById("modalContent");
    
    // Display song addition form
    let addSongForm = document.getElementById("addSongForm");
        addSongForm.style.display = "flex";


    // Visually indicate pending playlist content
    let newPlContent = document.createElement("div");
        newPlContent.setAttribute("id", "modalPlContent");
        newPlContent.className = "playlistContent";

    modal.appendChild(newPlContent);
    
}
// Event listener for new PL song addition
const addSongForm = document.getElementById("addSongForm");
addSongForm.addEventListener("submit", function(event) {
    event.preventDefault();
    const songTitle = document.getElementById("songTitleInput");
    const songArtist = document.getElementById("songArtistInput");
    const songAlbum = document.getElementById("songAlbumInput");
    const songDur = document.getElementById("songDurInput");

    let newPlContent = document.getElementById("modalPlContent");
        newPlContent.innerHTML =`
            ${newPlContent.innerHTML}
            <article id=song${newPlContent.childNodes.length}>
                <div class="left">
                    <img src="./assets/img/song.png" alt="song cover">
                    <div class="songInfo">
                        <h3>${songTitle.value}</h3>
                        <p>${songAlbum.value}</p>
                        <p>${songDur.value}</p>
                    </div>
                </div>
                <div class="right">
                    <p>${songDur.value}</p>
                </div>
            </article>
        `;
    
    songTitle.value = ("");
    songArtist.value = ("");
    songAlbum.value = ("");
    songDur.value = ("");

});

// Confirm playlist additions
function completeAdd() {
    console.log("complete, i guess");

    // Create a new card and add it to the display

    const title = document.getElementById("modalTitle");
    const author = document.getElementById("modalAuthor");

    const curCardList = document.getElementsByClassName("playlist-cards")[0];
    const newID = parseInt(curCardList.lastChild.id.split("card")[1])+1;

    let newCard = document.createElement("article");
        newCard.setAttribute("id", `card${newID}`);
        newCard.innerHTML = `
                <img class="cover" src="./assets/img/playlist.png" alt="playlist cover">
                <h2>${title.value}</h2>
                <p>by ${author.value}</p>
                <div class="likeCount">
                    <img id="heart${newID}" class="empty" onclick="likePL('heart${newID}')" src="./assets/img/hearticon.png" alt="a heart icon">
                    <p id="lc${newID}">0</p>            
                </div>
        `;

    curCardList.appendChild(newCard);

    // Reveal default buttons
    let shuff = document.getElementById("shuffle");
    let del = document.getElementById("delete");
    let edit = document.getElementById("edit");
    [shuff, del, edit].forEach((item) => item.style.display = "block");

    // Replace checkmark with X
    let close = document.getElementsByClassName("close")[0];
        close.setAttribute("src", "./assets/img/xicon.svg");
        close.setAttribute("onclick", "toggleModalv2(-1)");
    
    // Hide song addition form
    let addSongForm = document.getElementById("addSongForm");
        addSongForm.style.display = "none";

    // Revert title/author fields and remove extras
    title.outerHTML = `<h3 id="modalTitle">${title.value}</h3>`;
    author.outerHTML = `<p id="modalAuthor">by ${author.value}</p>`;
    document.getElementById("eT").remove();
    document.getElementById("eA").remove();

    toggleModalv2(-2);
}

// On startup:
loadData(null);